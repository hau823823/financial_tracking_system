// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"fintrack/config"
	"fintrack/internal/cache"
	"fintrack/internal/db"
	"fintrack/internal/handler"
	"fintrack/internal/mq"
	"fintrack/internal/service"
	"github.com/google/wire"
	"sync"
)

// Injectors from wire.go:

func InitializeTransactionHandler() (*handler.TransactionHandler, error) {
	config := NewConfig()
	dbClient, err := NewDBClient(config)
	if err != nil {
		return nil, err
	}
	cache := NewRedisCache(config)
	mqProducer := NewRabbitMQProducer(config)
	transactionService := service.NewTransactionService(dbClient, cache, mqProducer)
	transactionHandler := handler.NewTransactionHandler(transactionService)
	return transactionHandler, nil
}

func InitializeMessageHandler() (*handler.MessageHandler, error) {
	config := NewConfig()
	dbClient, err := NewDBClient(config)
	if err != nil {
		return nil, err
	}
	messageService := service.NewMessageService(dbClient)
	mqConsumer := NewRabbitMQConsumer(config)
	messageHandler := handler.NewMessageHandler(messageService, mqConsumer)
	return messageHandler, nil
}

// wire.go:

var (
	configOnce sync.Once
	cfg        *config.Config

	dbOnce   sync.Once
	database *db.MySQLClient

	rabbitMQOnce     sync.Once
	rabbitMQProducer *mq.RabbitMQClient
	rabbitMQConsumer *mq.RabbitMQClient

	redisOnce  sync.Once
	redisCache *cache.Redis
)

func NewConfig() *config.Config {
	configOnce.Do(func() {
		cfg = config.NewConfig()
	})
	return cfg
}

func NewDBClient(cfg2 *config.Config) (db.DBClient, error) {
	var err error
	dbOnce.Do(func() {
		database, err = db.NewMySQLClient(cfg2.DSN)
	})
	return database, err
}

func NewRedisCache(cfg2 *config.Config) cache.Cache {
	redisOnce.Do(func() {
		redisCache = cache.NewRedis(cfg2.RedisConfig)
	})
	return redisCache
}

// NewRabbitMQProducer 確保 RabbitMQ 生產者僅初始化一次
func NewRabbitMQProducer(cfg2 *config.Config) mq.MQProducer {
	rabbitMQOnce.Do(func() {
		rabbitMQProducer, _ = mq.NewRabbitMQClient(cfg2.RabbitMQConfig)
	})
	return rabbitMQProducer
}

// NewRabbitMQConsumer 初始化 RabbitMQ 消費者
func NewRabbitMQConsumer(cfg2 *config.Config) mq.MQConsumer {
	rabbitMQOnce.Do(func() {
		rabbitMQConsumer, _ = mq.NewRabbitMQClient(cfg2.RabbitMQConfig)
	})
	return rabbitMQConsumer
}

// ProviderSet 定義所有的依賴提供者
var ProviderSet = wire.NewSet(
	NewConfig,
	NewDBClient,
	NewRedisCache,
	NewRabbitMQProducer,
	NewRabbitMQConsumer, service.NewTransactionService, handler.NewTransactionHandler, service.NewMessageService, handler.NewMessageHandler,
)
